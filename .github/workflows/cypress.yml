name: Cypress E2E Tests

on: push

jobs:
  chrome-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository with Cypress tests
        uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Checkout external repository (Slawek's localstack)
        uses: actions/checkout@v4
        with:
          repository: "slawekradzyminski/awesome-localstack"
          path: "awesome-localstack"
      - name: Run Docker Compose
        run: |
          cd awesome-localstack
          chmod +x run-docker-compose-ci.sh
          ./run-docker-compose-ci.sh
      - name: Install chrome
        uses: browser-actions/setup-chrome@v1
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: |
          npx cypress run \
            --browser chrome \
            --env "login=${{ secrets.USERNAME }},password=${{ secrets.PASSWORD }}" \
            --record \
            --key ${{ secrets.CYPRESS_RECORD_KEY }}
      - name: Save screenshots on failure
        uses: actions/upload-artifact@v4 
        if: failure()
        with:
          name: cypress-screenshots-chrome
          path: cypress/screenshots
          if-no-files-found: ignore
  firefox-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository with Cypress tests
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Checkout external repository (Slawek's localstack)
        uses: actions/checkout@v4
        with:
          repository: "slawekradzyminski/awesome-localstack"
          path: "awesome-localstack"

      - name: Run Docker Compose
        run: |
          cd awesome-localstack
          chmod +x run-docker-compose-ci.sh
          ./run-docker-compose-ci.sh

      - name: Install Firefox
        uses: browser-actions/setup-firefox@v1

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: |
          npx cypress run \
            --browser firefox \
            --env "login=${{ secrets.USERNAME }},password=${{ secrets.PASSWORD }}"

      - name: Save screenshots on failure
        uses: actions/upload-artifact@v4 
        if: failure()
        with:
          name: cypress-screenshots-ff
          path: cypress/screenshots
          if-no-files-found: ignore
  edge-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository with Cypress tests
        uses: actions/checkout@v4
      
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Checkout external repository (Slawek's localstack)
        uses: actions/checkout@v4
        with:
          repository: "slawekradzyminski/awesome-localstack"
          path: "awesome-localstack"
      
      - name: Run Docker Compose
        run: |
          cd awesome-localstack
          chmod +x run-docker-compose-ci.sh
          ./run-docker-compose-ci.sh
      
      - name: Install Edge
        run: curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft-archive-keyring.gpg && sudo mv microsoft-archive-keyring.gpg /usr/share/keyrings/ && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-archive-keyring.gpg] https://packages.microsoft.com/repos/edge stable main" | sudo tee /etc/apt/sources.list.d/microsoft-edge-stable.list && sudo apt update && sudo apt install -y microsoft-edge-stable
        
      - name: Install dependencies
        run: npm install
      
      - name: Run tests
        run: |
          npx cypress run \
            --browser edge \
            --env "login=${{ secrets.USERNAME }},password=${{ secrets.PASSWORD }}"
      
      - name: Save screenshots on failure
        uses: actions/upload-artifact@v4 
        if: failure()
        with:
          name: cypress-screenshots-edge
          path: cypress/screenshots
          if-no-files-found: ignore
      
      - name: Load test report history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: allure-results

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d_%H-%M')" >> $GITHUB_OUTPUT

      - name: Create index page
        run: |
          mkdir -p gh-pages
          echo "<!DOCTYPE html>" > gh-pages/index.html
          echo "<html><head><title>Test Reports</title>" >> gh-pages/index.html
          echo "<style>body{font-family:Arial;margin:20px;} .report{margin:10px 0;}</style>" >> gh-pages/index.html
          echo "</head><body>" >> gh-pages/index.html
          echo "<h1>Test Reports</h1>" >> gh-pages/index.html
          echo "<div id='reports'></div>" >> gh-pages/index.html
          echo "<script>" >> gh-pages/index.html
          echo "fetch('https://api.github.com/repos/${{ github.repository }}/contents/allure-history?ref=gh-pages')" >> gh-pages/index.html
          echo "  .then(response => response.json())" >> gh-pages/index.html
          echo "  .then(data => {" >> gh-pages/index.html
          echo "    const reports = data.filter(item => item.type === 'dir').sort((a, b) => b.name.localeCompare(a.name));" >> gh-pages/index.html
          echo "    const reportsHtml = reports.map(report => " >> gh-pages/index.html
          echo "      \`<div class='report'><a href='allure-history/\${report.name}/index.html'>\${report.name}</a></div>\`" >> gh-pages/index.html
          echo "    ).join('');" >> gh-pages/index.html
          echo "    document.getElementById('reports').innerHTML = reportsHtml;" >> gh-pages/index.html
          echo "  });" >> gh-pages/index.html
          echo "</script></body></html>" >> gh-pages/index.html

      - name: Publish test report and index
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: gh-pages
          keep_files: true